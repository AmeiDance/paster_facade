// Code generated by Kitex v0.0.1. DO NOT EDIT.

package pastercoreservice

import (
    "context"
    "github.com/ameidance/paster_facade/model/dto/kitex_gen/ameidance/paster/core"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return pasterCoreServiceServiceInfo
}

var pasterCoreServiceServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "PasterCoreService"
	handlerType := (*core.PasterCoreService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetPost":     kitex.NewMethodInfo(getPostHandler, newPasterCoreServiceGetPostArgs, newPasterCoreServiceGetPostResult, false),
		"SavePost":    kitex.NewMethodInfo(savePostHandler, newPasterCoreServiceSavePostArgs, newPasterCoreServiceSavePostResult, false),
		"DeletePost":  kitex.NewMethodInfo(deletePostHandler, newPasterCoreServiceDeletePostArgs, newPasterCoreServiceDeletePostResult, false),
		"GetComments": kitex.NewMethodInfo(getCommentsHandler, newPasterCoreServiceGetCommentsArgs, newPasterCoreServiceGetCommentsResult, false),
		"SaveComment": kitex.NewMethodInfo(saveCommentHandler, newPasterCoreServiceSaveCommentArgs, newPasterCoreServiceSaveCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "core",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.1",
		Extra:           extra,
	}
	return svcInfo
}

func getPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*core.PasterCoreServiceGetPostArgs)
	realResult := result.(*core.PasterCoreServiceGetPostResult)
	success, err := handler.(core.PasterCoreService).GetPost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPasterCoreServiceGetPostArgs() interface{} {
	return core.NewPasterCoreServiceGetPostArgs()
}

func newPasterCoreServiceGetPostResult() interface{} {
	return core.NewPasterCoreServiceGetPostResult()
}

func savePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*core.PasterCoreServiceSavePostArgs)
	realResult := result.(*core.PasterCoreServiceSavePostResult)
	success, err := handler.(core.PasterCoreService).SavePost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPasterCoreServiceSavePostArgs() interface{} {
	return core.NewPasterCoreServiceSavePostArgs()
}

func newPasterCoreServiceSavePostResult() interface{} {
	return core.NewPasterCoreServiceSavePostResult()
}

func deletePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*core.PasterCoreServiceDeletePostArgs)
	realResult := result.(*core.PasterCoreServiceDeletePostResult)
	success, err := handler.(core.PasterCoreService).DeletePost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPasterCoreServiceDeletePostArgs() interface{} {
	return core.NewPasterCoreServiceDeletePostArgs()
}

func newPasterCoreServiceDeletePostResult() interface{} {
	return core.NewPasterCoreServiceDeletePostResult()
}

func getCommentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*core.PasterCoreServiceGetCommentsArgs)
	realResult := result.(*core.PasterCoreServiceGetCommentsResult)
	success, err := handler.(core.PasterCoreService).GetComments(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPasterCoreServiceGetCommentsArgs() interface{} {
	return core.NewPasterCoreServiceGetCommentsArgs()
}

func newPasterCoreServiceGetCommentsResult() interface{} {
	return core.NewPasterCoreServiceGetCommentsResult()
}

func saveCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*core.PasterCoreServiceSaveCommentArgs)
	realResult := result.(*core.PasterCoreServiceSaveCommentResult)
	success, err := handler.(core.PasterCoreService).SaveComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPasterCoreServiceSaveCommentArgs() interface{} {
	return core.NewPasterCoreServiceSaveCommentArgs()
}

func newPasterCoreServiceSaveCommentResult() interface{} {
	return core.NewPasterCoreServiceSaveCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetPost(ctx context.Context, req *core.GetPostRequest) (r *core.GetPostResponse, err error) {
	var _args core.PasterCoreServiceGetPostArgs
	_args.Req = req
	var _result core.PasterCoreServiceGetPostResult
	if err = p.c.Call(ctx, "GetPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SavePost(ctx context.Context, req *core.SavePostRequest) (r *core.SavePostResponse, err error) {
	var _args core.PasterCoreServiceSavePostArgs
	_args.Req = req
	var _result core.PasterCoreServiceSavePostResult
	if err = p.c.Call(ctx, "SavePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePost(ctx context.Context, req *core.DeletePostRequest) (r *core.DeletePostResponse, err error) {
	var _args core.PasterCoreServiceDeletePostArgs
	_args.Req = req
	var _result core.PasterCoreServiceDeletePostResult
	if err = p.c.Call(ctx, "DeletePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetComments(ctx context.Context, req *core.GetCommentsRequest) (r *core.GetCommentsResponse, err error) {
	var _args core.PasterCoreServiceGetCommentsArgs
	_args.Req = req
	var _result core.PasterCoreServiceGetCommentsResult
	if err = p.c.Call(ctx, "GetComments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SaveComment(ctx context.Context, req *core.SaveCommentRequest) (r *core.SaveCommentResponse, err error) {
	var _args core.PasterCoreServiceSaveCommentArgs
	_args.Req = req
	var _result core.PasterCoreServiceSaveCommentResult
	if err = p.c.Call(ctx, "SaveComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
