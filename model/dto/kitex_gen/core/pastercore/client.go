// Code generated by Kitex v0.0.3. DO NOT EDIT.

package pastercore

import (
	"context"
	"github.com/ameidance/paster_facade/model/dto/kitex_gen/core"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/streaming"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetPost(ctx context.Context, Req *core.GetPostRequest, callOptions ...callopt.Option) (r *core.GetPostResponse, err error)
	SavePost(ctx context.Context, Req *core.SavePostRequest, callOptions ...callopt.Option) (r *core.SavePostResponse, err error)
	DeletePost(ctx context.Context, Req *core.DeletePostRequest, callOptions ...callopt.Option) (r *core.DeletePostResponse, err error)
	GetComments(ctx context.Context, Req *core.GetCommentsRequest, callOptions ...callopt.Option) (r *core.GetCommentsResponse, err error)
	SaveComment(ctx context.Context, Req *core.SaveCommentRequest, callOptions ...callopt.Option) (r *core.SaveCommentResponse, err error)
	Check(ctx context.Context, Req *core.HealthCheckRequest, callOptions ...callopt.Option) (r *core.HealthCheckResponse, err error)
	Watch(ctx context.Context, Req *core.HealthCheckRequest, callOptions ...callopt.Option) (stream PasterCore_WatchClient, err error)
}

type PasterCore_WatchClient interface {
	streaming.Stream
	Recv() (*core.HealthCheckResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPasterCoreClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPasterCoreClient struct {
	*kClient
}

func (p *kPasterCoreClient) GetPost(ctx context.Context, Req *core.GetPostRequest, callOptions ...callopt.Option) (r *core.GetPostResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPost(ctx, Req)
}

func (p *kPasterCoreClient) SavePost(ctx context.Context, Req *core.SavePostRequest, callOptions ...callopt.Option) (r *core.SavePostResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SavePost(ctx, Req)
}

func (p *kPasterCoreClient) DeletePost(ctx context.Context, Req *core.DeletePostRequest, callOptions ...callopt.Option) (r *core.DeletePostResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePost(ctx, Req)
}

func (p *kPasterCoreClient) GetComments(ctx context.Context, Req *core.GetCommentsRequest, callOptions ...callopt.Option) (r *core.GetCommentsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetComments(ctx, Req)
}

func (p *kPasterCoreClient) SaveComment(ctx context.Context, Req *core.SaveCommentRequest, callOptions ...callopt.Option) (r *core.SaveCommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SaveComment(ctx, Req)
}

func (p *kPasterCoreClient) Check(ctx context.Context, Req *core.HealthCheckRequest, callOptions ...callopt.Option) (r *core.HealthCheckResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Check(ctx, Req)
}

func (p *kPasterCoreClient) Watch(ctx context.Context, Req *core.HealthCheckRequest, callOptions ...callopt.Option) (stream PasterCore_WatchClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Watch(ctx, Req)
}
